// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: roles.sql

package database

import (
	"context"
)

const getRole = `-- name: GetRole :one
SELECT id, name FROM roles WHERE id = $1
`

func (q *Queries) GetRole(ctx context.Context, id int32) (Role, error) {
	row := q.db.QueryRowContext(ctx, getRole, id)
	var i Role
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const getUserRoles = `-- name: GetUserRoles :many
SELECT roles.id as id, roles.name as name, user_id, permissions.id as permission_id, permissions.name as permission_name FROM roles
INNER JOIN users_roles ON roles.id = users_roles.role_id 
INNER JOIN roles_permissions ON roles.id = roles_permissions.role_id
INNER JOIN permissions ON roles_permissions.permission_id = permissions.id
WHERE users_roles.user_id = $1
`

type GetUserRolesRow struct {
	ID             int32
	Name           string
	UserID         int32
	PermissionID   int32
	PermissionName string
}

func (q *Queries) GetUserRoles(ctx context.Context, userID int32) ([]GetUserRolesRow, error) {
	rows, err := q.db.QueryContext(ctx, getUserRoles, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUserRolesRow
	for rows.Next() {
		var i GetUserRolesRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.UserID,
			&i.PermissionID,
			&i.PermissionName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
