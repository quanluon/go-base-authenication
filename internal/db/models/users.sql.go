// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (name, email, password) VALUES ($1, $2, $3) RETURNING id
`

type CreateUserParams struct {
	Name     string `db:"name" json:"name"`
	Email    string `db:"email" json:"email"`
	Password string `db:"password" json:"password"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (int32, error) {
	row := q.db.QueryRow(ctx, createUser, arg.Name, arg.Email, arg.Password)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, name, password, email, created_at, updated_at FROM users WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Password,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserById = `-- name: GetUserById :one
SELECT id, name, password, email, created_at, updated_at FROM users WHERE id = $1
`

func (q *Queries) GetUserById(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRow(ctx, getUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Password,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserWithRoles = `-- name: GetUserWithRoles :one
SELECT id, name, password, email, created_at, updated_at, user_id, role_id FROM users LEFT JOIN users_roles ON users.id = users_roles.user_id WHERE users.id = $1
`

type GetUserWithRolesRow struct {
	ID        int32            `db:"id" json:"id"`
	Name      string           `db:"name" json:"name"`
	Password  string           `db:"password" json:"password"`
	Email     string           `db:"email" json:"email"`
	CreatedAt pgtype.Timestamp `db:"created_at" json:"created_at"`
	UpdatedAt pgtype.Timestamp `db:"updated_at" json:"updated_at"`
	UserID    pgtype.Int4      `db:"user_id" json:"user_id"`
	RoleID    pgtype.Int4      `db:"role_id" json:"role_id"`
}

func (q *Queries) GetUserWithRoles(ctx context.Context, id int32) (GetUserWithRolesRow, error) {
	row := q.db.QueryRow(ctx, getUserWithRoles, id)
	var i GetUserWithRolesRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Password,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.RoleID,
	)
	return i, err
}

const getUsers = `-- name: GetUsers :many
SELECT id, name, password, email, created_at, updated_at FROM users 
WHERE name LIKE $1
LIMIT $2 OFFSET $3
`

type GetUsersParams struct {
	Name   string `db:"name" json:"name"`
	Limit  int32  `db:"limit" json:"limit"`
	Offset int32  `db:"offset" json:"offset"`
}

func (q *Queries) GetUsers(ctx context.Context, arg GetUsersParams) ([]User, error) {
	rows, err := q.db.Query(ctx, getUsers, arg.Name, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Password,
			&i.Email,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUsersWithRoles = `-- name: GetUsersWithRoles :many
SELECT id, name, password, email, created_at, updated_at, user_id, role_id FROM users LEFT JOIN users_roles ON users.id = users_roles.user_id
`

type GetUsersWithRolesRow struct {
	ID        int32            `db:"id" json:"id"`
	Name      string           `db:"name" json:"name"`
	Password  string           `db:"password" json:"password"`
	Email     string           `db:"email" json:"email"`
	CreatedAt pgtype.Timestamp `db:"created_at" json:"created_at"`
	UpdatedAt pgtype.Timestamp `db:"updated_at" json:"updated_at"`
	UserID    pgtype.Int4      `db:"user_id" json:"user_id"`
	RoleID    pgtype.Int4      `db:"role_id" json:"role_id"`
}

func (q *Queries) GetUsersWithRoles(ctx context.Context) ([]GetUsersWithRolesRow, error) {
	rows, err := q.db.Query(ctx, getUsersWithRoles)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUsersWithRolesRow
	for rows.Next() {
		var i GetUsersWithRolesRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Password,
			&i.Email,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.UserID,
			&i.RoleID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users SET name = $1 WHERE id = $2
`

type UpdateUserParams struct {
	Name string `db:"name" json:"name"`
	ID   int32  `db:"id" json:"id"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.Exec(ctx, updateUser, arg.Name, arg.ID)
	return err
}
